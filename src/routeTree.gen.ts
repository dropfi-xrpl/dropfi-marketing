/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as _layoutRouteImport } from './routes/__layout'
import { Route as _documentationRouteImport } from './routes/__documentation'
import { Route as _layoutIndexRouteImport } from './routes/__layout/index'
import { Route as _layoutSupportRouteImport } from './routes/__layout/support'
import { Route as _documentationDocsIndexRouteImport } from './routes/__documentation/docs/index'
import { Route as _documentationDocsPageRouteImport } from './routes/__documentation/docs/$page'
import { ServerRoute as SitemapDotxmlServerRouteImport } from './routes/sitemap[.]xml'

const rootServerRouteImport = createServerRootRoute()

const _layoutRoute = _layoutRouteImport.update({
  id: '/__layout',
  getParentRoute: () => rootRouteImport,
} as any)
const _documentationRoute = _documentationRouteImport.update({
  id: '/__documentation',
  getParentRoute: () => rootRouteImport,
} as any)
const _layoutIndexRoute = _layoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => _layoutRoute,
} as any)
const _layoutSupportRoute = _layoutSupportRouteImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => _layoutRoute,
} as any)
const _documentationDocsIndexRoute = _documentationDocsIndexRouteImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => _documentationRoute,
} as any)
const _documentationDocsPageRoute = _documentationDocsPageRouteImport.update({
  id: '/docs/$page',
  path: '/docs/$page',
  getParentRoute: () => _documentationRoute,
} as any)
const SitemapDotxmlServerRoute = SitemapDotxmlServerRouteImport.update({
  id: '/sitemap.xml',
  path: '/sitemap.xml',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/support': typeof _layoutSupportRoute
  '/': typeof _layoutIndexRoute
  '/docs/$page': typeof _documentationDocsPageRoute
  '/docs': typeof _documentationDocsIndexRoute
}
export interface FileRoutesByTo {
  '/support': typeof _layoutSupportRoute
  '/': typeof _layoutIndexRoute
  '/docs/$page': typeof _documentationDocsPageRoute
  '/docs': typeof _documentationDocsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/__documentation': typeof _documentationRouteWithChildren
  '/__layout': typeof _layoutRouteWithChildren
  '/__layout/support': typeof _layoutSupportRoute
  '/__layout/': typeof _layoutIndexRoute
  '/__documentation/docs/$page': typeof _documentationDocsPageRoute
  '/__documentation/docs/': typeof _documentationDocsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/support' | '/' | '/docs/$page' | '/docs'
  fileRoutesByTo: FileRoutesByTo
  to: '/support' | '/' | '/docs/$page' | '/docs'
  id:
    | '__root__'
    | '/__documentation'
    | '/__layout'
    | '/__layout/support'
    | '/__layout/'
    | '/__documentation/docs/$page'
    | '/__documentation/docs/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  _documentationRoute: typeof _documentationRouteWithChildren
  _layoutRoute: typeof _layoutRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRoutesByTo {
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/sitemap.xml'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/sitemap.xml'
  id: '__root__' | '/sitemap.xml'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  SitemapDotxmlServerRoute: typeof SitemapDotxmlServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__layout': {
      id: '/__layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _layoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__documentation': {
      id: '/__documentation'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _documentationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__layout/': {
      id: '/__layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof _layoutIndexRouteImport
      parentRoute: typeof _layoutRoute
    }
    '/__layout/support': {
      id: '/__layout/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof _layoutSupportRouteImport
      parentRoute: typeof _layoutRoute
    }
    '/__documentation/docs/': {
      id: '/__documentation/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof _documentationDocsIndexRouteImport
      parentRoute: typeof _documentationRoute
    }
    '/__documentation/docs/$page': {
      id: '/__documentation/docs/$page'
      path: '/docs/$page'
      fullPath: '/docs/$page'
      preLoaderRoute: typeof _documentationDocsPageRouteImport
      parentRoute: typeof _documentationRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/sitemap.xml': {
      id: '/sitemap.xml'
      path: '/sitemap.xml'
      fullPath: '/sitemap.xml'
      preLoaderRoute: typeof SitemapDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface _documentationRouteChildren {
  _documentationDocsPageRoute: typeof _documentationDocsPageRoute
  _documentationDocsIndexRoute: typeof _documentationDocsIndexRoute
}

const _documentationRouteChildren: _documentationRouteChildren = {
  _documentationDocsPageRoute: _documentationDocsPageRoute,
  _documentationDocsIndexRoute: _documentationDocsIndexRoute,
}

const _documentationRouteWithChildren = _documentationRoute._addFileChildren(
  _documentationRouteChildren,
)

interface _layoutRouteChildren {
  _layoutSupportRoute: typeof _layoutSupportRoute
  _layoutIndexRoute: typeof _layoutIndexRoute
}

const _layoutRouteChildren: _layoutRouteChildren = {
  _layoutSupportRoute: _layoutSupportRoute,
  _layoutIndexRoute: _layoutIndexRoute,
}

const _layoutRouteWithChildren =
  _layoutRoute._addFileChildren(_layoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  _documentationRoute: _documentationRouteWithChildren,
  _layoutRoute: _layoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  SitemapDotxmlServerRoute: SitemapDotxmlServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
